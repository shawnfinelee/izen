/**
 * Á¶ÖÈÅìÂ∑•‰ΩúÊó•ÂøóËÄóÊó∂ÁªüËÆ°ËÑöÊú¨ v1.0
 * 
 * ÂäüËÉΩÔºö
 * - Ëá™Âä®ËØÜÂà´Âπ∂ÁªüËÆ° class="main-table table-effort" Ë°®Ê†º‰∏≠ÁöÑËÄóÊó∂Êï∞ÊçÆ
 * - ÊîØÊåÅÂ§öÁßçÊó∂Èó¥Ê†ºÂºèÔºöÁ∫ØÊï∞Â≠ó„ÄÅÂ∞èÊó∂(h)„ÄÅÂàÜÈíü(m)„ÄÅ‰∏≠ÊñáÊ†ºÂºèÁ≠â
 * - Ëá™Âä®È™åËØÅÈ°µÈù¢ÊòæÁ§∫ÁöÑÊÄªËÆ°Êï∞ÊçÆ
 * - Êèê‰æõËØ¶ÁªÜÁöÑË∞ÉËØï‰ø°ÊÅØÂíåÁªüËÆ°Êä•Âëä
 * 
 * ‰ΩøÁî®ÊñπÊ≥ïÔºö
 * 1. Âú®ÊµèËßàÂô®ÊéßÂà∂Âè∞‰∏≠Á≤òË¥¥Ê≠§ËÑöÊú¨
 * 2. Ë∞ÉÁî® calculateEffort() ÂáΩÊï∞
 * 3. Êü•ÁúãÊéßÂà∂Âè∞ËæìÂá∫ÁöÑÁªüËÆ°ÁªìÊûú
 * 
 * ‰ΩúËÄÖÔºöAI Assistant
 * Êó•ÊúüÔºö2025-07-15
 */

(function() {
    'use strict';
    
    /**
     * Â∑•‰ΩúÊó•ÂøóËÄóÊó∂ÁªüËÆ°Âô®Á±ª
     */
    class EffortCalculator {
        constructor(options = {}) {
            this.debug = options.debug !== false; // ÈªòËÆ§ÂºÄÂêØË∞ÉËØï
            this.totalEffort = 0;
            this.records = [];
            this.version = '1.0';
        }

        /**
         * Ëß£ÊûêÊó∂Èó¥Â≠óÁ¨¶‰∏≤ÔºåÊîØÊåÅÂ§öÁßçÊ†ºÂºè
         * @param {string} timeStr - Êó∂Èó¥Â≠óÁ¨¶‰∏≤
         * @returns {number} - Â∞èÊó∂Êï∞
         */
        parseTimeString(timeStr) {
            if (!timeStr || typeof timeStr !== 'string') return 0;
            
            let totalHours = 0;
            const text = timeStr.trim();
            
            // ÂåπÈÖçÁ∫ØÊï∞Â≠óÔºàÈªòËÆ§‰∏∫Â∞èÊó∂Ôºâ
            const numberMatch = text.match(/^(\d+(?:\.\d+)?)$/);
            if (numberMatch) {
                return parseFloat(numberMatch[1]);
            }
            
            // ÂåπÈÖçÂ∞èÊó∂Ê†ºÂºè
            const hourPatterns = [
                /(\d+(?:\.\d+)?)\s*h/gi,      // 1.5h, 2h
                /(\d+(?:\.\d+)?)\s*Â∞èÊó∂/g,    // 2Â∞èÊó∂
                /(\d+(?:\.\d+)?)\s*Êó∂/g,      // 2Êó∂
                /(\d+(?:\.\d+)?)\s*hour/gi,   // 2hour
            ];
            
            // ÂåπÈÖçÂàÜÈíüÊ†ºÂºè
            const minutePatterns = [
                /(\d+)\s*m/gi,                // 30m
                /(\d+)\s*ÂàÜÈíü/g,              // 30ÂàÜÈíü
                /(\d+)\s*ÂàÜ/g,                // 30ÂàÜ
                /(\d+)\s*min/gi,              // 30min
            ];
            
            // Â§ÑÁêÜÂ∞èÊó∂
            hourPatterns.forEach(pattern => {
                const matches = text.match(pattern);
                if (matches) {
                    matches.forEach(match => {
                        const num = parseFloat(match.replace(/[^\d.]/g, ''));
                        if (!isNaN(num)) {
                            totalHours += num;
                        }
                    });
                }
            });
            
            // Â§ÑÁêÜÂàÜÈíü
            minutePatterns.forEach(pattern => {
                const matches = text.match(pattern);
                if (matches) {
                    matches.forEach(match => {
                        const num = parseFloat(match.replace(/[^\d.]/g, ''));
                        if (!isNaN(num)) {
                            totalHours += num / 60;
                        }
                    });
                }
            });
            
            // Â§ÑÁêÜÂ§çÂêàÊ†ºÂºèÂ¶Ç "2h30m"
            const complexPattern = /(\d+)\s*h\s*(\d+)\s*m/gi;
            const complexMatches = text.match(complexPattern);
            if (complexMatches) {
                complexMatches.forEach(match => {
                    const parts = match.match(/(\d+)/g);
                    if (parts && parts.length >= 2) {
                        totalHours += parseInt(parts[0]) + parseInt(parts[1]) / 60;
                    }
                });
            }
            
            return totalHours;
        }

        /**
         * Êü•ÊâæÂπ∂ÁªüËÆ°ËÄóÊó∂Ë°®Ê†º
         * @returns {Object} - ÁªüËÆ°ÁªìÊûú
         */
        calculateEffort() {
            this.totalEffort = 0;
            this.records = [];
            
            if (this.debug) {
                console.log(`üöÄ Á¶ÖÈÅìÂ∑•‰ΩúÊó•ÂøóËÄóÊó∂ÁªüËÆ°Âô® v${this.version} ÂºÄÂßãËøêË°å...`);
                console.log(`üìÖ ÁªüËÆ°Êó∂Èó¥: ${new Date().toLocaleString()}`);
                console.log(`üåê È°µÈù¢URL: ${window.location.href}`);
            }
            
            // Êü•ÊâæÁõÆÊ†áË°®Ê†º
            const targetSelectors = [
                '.main-table.table-effort',
                'table.main-table.table-effort',
                'form.main-table.table-effort table',
                '.table-effort'
            ];
            
            let targetTables = [];
            targetSelectors.forEach(selector => {
                const tables = document.querySelectorAll(selector);
                if (tables.length > 0) {
                    targetTables = [...targetTables, ...Array.from(tables)];
                }
            });
            
            if (this.debug) {
                console.log('üîç Êü•ÊâæÁõÆÊ†áË°®Ê†º...');
                console.log(`ÊâæÂà∞ ${targetTables.length} ‰∏™ÁõÆÊ†áË°®Ê†º`);
            }
            
            if (targetTables.length === 0) {
                // Â¶ÇÊûúÊ≤°ÊâæÂà∞ÁâπÂÆöÁ±ªÂêçÁöÑË°®Ê†ºÔºåÊü•ÊâæÊâÄÊúâË°®Ê†º
                const allTables = document.querySelectorAll('table');
                if (this.debug) {
                    console.log(`Êú™ÊâæÂà∞ÁõÆÊ†áË°®Ê†ºÔºåÊ£ÄÊü•ÊâÄÊúâ ${allTables.length} ‰∏™Ë°®Ê†º...`);
                }
                
                allTables.forEach((table, index) => {
                    this.processTable(table, index, false);
                });
            } else {
                targetTables.forEach((table, index) => {
                    this.processTable(table, index, true);
                });
            }
            
            // È™åËØÅÈ°µÈù¢Â∫ïÈÉ®ÁöÑÊÄªËÆ°‰ø°ÊÅØ
            this.validateWithPageTotal();
            
            const result = {
                success: true,
                version: this.version,
                timestamp: new Date().toISOString(),
                totalHours: this.totalEffort,
                recordCount: this.records.length,
                records: this.records,
                summary: this.generateSummary(),
                pageUrl: window.location.href
            };
            
            if (this.debug) {
                this.printResults(result);
            }
            
            return result;
        }

        /**
         * Â§ÑÁêÜÂçï‰∏™Ë°®Ê†º
         * @param {HTMLElement} table - Ë°®Ê†ºÂÖÉÁ¥†
         * @param {number} tableIndex - Ë°®Ê†ºÁ¥¢Âºï
         * @param {boolean} isTargetTable - ÊòØÂê¶‰∏∫ÁõÆÊ†áË°®Ê†º
         */
        processTable(table, tableIndex, isTargetTable = false) {
            if (this.debug) {
                console.log(`üìä Â§ÑÁêÜË°®Ê†º ${tableIndex} (ÁõÆÊ†áË°®Ê†º: ${isTargetTable})`);
                console.log('Ë°®Ê†ºÁ±ªÂêç:', table.className);
                console.log('Ë°®Ê†ºID:', table.id);
            }
            
            // Êü•ÊâæË°®Â§¥ÔºåÁ°ÆÂÆöËÄóÊó∂ÂàóÁöÑ‰ΩçÁΩÆ
            const headers = table.querySelectorAll('thead th, tr:first-child th, tr:first-child td');
            let effortColumnIndex = -1;
            
            headers.forEach((header, index) => {
                const headerText = header.textContent.trim();
                if (headerText.includes('ËÄóÊó∂') || headerText.includes('Â∑•Êó∂') || 
                    headerText.includes('Êó∂Èó¥') || headerText.includes('effort') ||
                    headerText.includes('consumed') || headerText.includes('hours')) {
                    effortColumnIndex = index;
                    if (this.debug) {
                        console.log(`‚úÖ ÊâæÂà∞ËÄóÊó∂Âàó: "${headerText}" (Á¥¢Âºï: ${index})`);
                    }
                }
            });
            
            // Â§ÑÁêÜÊï∞ÊçÆË°å
            const dataRows = table.querySelectorAll('tbody tr, tr');
            let tableTotal = 0;
            let processedRows = 0;
            
            dataRows.forEach((row, rowIndex) => {
                // Ë∑≥ËøáË°®Â§¥Ë°å
                if (row.parentElement && row.parentElement.tagName === 'THEAD') return;
                
                const cells = row.querySelectorAll('td, th');
                if (cells.length === 0) return;
                
                // Ë∑≥ËøáÊòéÊòæÁöÑË°®Â§¥Ë°åÔºàÊâÄÊúâÂçïÂÖÉÊ†ºÈÉΩÊòØthÔºâ
                const thCount = row.querySelectorAll('th').length;
                if (thCount === cells.length && thCount > 0) return;
                
                let rowEffort = 0;
                let workContent = '';
                let recordId = '';
                let date = '';
                
                if (effortColumnIndex >= 0 && cells[effortColumnIndex]) {
                    // ‰ΩøÁî®Á°ÆÂÆöÁöÑËÄóÊó∂Âàó
                    const effortText = cells[effortColumnIndex].textContent.trim();
                    rowEffort = this.parseTimeString(effortText);
                    
                    // ÊèêÂèñÂÖ∂‰ªñ‰ø°ÊÅØ
                    if (cells[0]) recordId = cells[0].textContent.trim();
                    if (cells[1]) date = cells[1].textContent.trim();
                    if (cells[2]) workContent = cells[2].textContent.trim();
                    
                    if (rowEffort > 0) {
                        tableTotal += rowEffort;
                        processedRows++;
                        
                        this.records.push({
                            tableIndex,
                            rowIndex,
                            id: recordId,
                            date: date,
                            work: workContent,
                            effort: rowEffort,
                            effortText: effortText
                        });
                        
                        if (this.debug) {
                            console.log(`üìù ËÆ∞ÂΩï ${this.records.length}: ${workContent || recordId} - ${effortText} (${rowEffort}Â∞èÊó∂)`);
                        }
                    }
                } else if (isTargetTable || table.className.includes('effort')) {
                    // Â¶ÇÊûúÊòØÁõÆÊ†áË°®Ê†º‰ΩÜÊ≤°ÊâæÂà∞ËÄóÊó∂ÂàóÔºåÊêúÁ¥¢ÊâÄÊúâÂàó
                    cells.forEach((cell, cellIndex) => {
                        const cellText = cell.textContent.trim();
                        const effort = this.parseTimeString(cellText);
                        
                        if (effort > 0) {
                            // ÈÅøÂÖçÈáçÂ§çËÆ°ÁÆóÂêå‰∏ÄË°åÁöÑÊï∞ÊçÆ
                            const existingRecord = this.records.find(r => 
                                r.tableIndex === tableIndex && r.rowIndex === rowIndex
                            );
                            
                            if (!existingRecord) {
                                tableTotal += effort;
                                processedRows++;
                                
                                // ÊèêÂèñÂÖ∂‰ªñ‰ø°ÊÅØ
                                if (cells[0]) recordId = cells[0].textContent.trim();
                                if (cells[1]) date = cells[1].textContent.trim();
                                if (cells[2]) workContent = cells[2].textContent.trim();
                                
                                this.records.push({
                                    tableIndex,
                                    rowIndex,
                                    id: recordId,
                                    date: date,
                                    work: workContent,
                                    effort: effort,
                                    effortText: cellText,
                                    columnIndex: cellIndex
                                });
                                
                                if (this.debug) {
                                    console.log(`üìù ËÆ∞ÂΩï ${this.records.length}: ${workContent || recordId} - ${cellText} (${effort}Â∞èÊó∂)`);
                                }
                            }
                        }
                    });
                }
            });
            
            if (tableTotal > 0) {
                this.totalEffort += tableTotal;
                if (this.debug) {
                    console.log(`üìä Ë°®Ê†º ${tableIndex} Â∞èËÆ°: ${tableTotal} Â∞èÊó∂ (Â§ÑÁêÜ‰∫Ü ${processedRows} Ë°å)`);
                }
            }
        }

        /**
         * È™åËØÅÈ°µÈù¢Â∫ïÈÉ®ÁöÑÊÄªËÆ°‰ø°ÊÅØ
         */
        validateWithPageTotal() {
            const footerSelectors = [
                '.table-footer .text',
                '.footer-info',
                '.total-info',
                '.table-footer',
                '[class*="total"]',
                '[class*="footer"]'
            ];
            
            let pageTotal = null;
            
            footerSelectors.forEach(selector => {
                const elements = document.querySelectorAll(selector);
                elements.forEach(element => {
                    const text = element.textContent;
                    const match = text.match(/ÊÄªÊ∂àËÄó\s*(\d+(?:\.\d+)?)\s*Â∞èÊó∂/);
                    if (match && !pageTotal) {
                        pageTotal = parseFloat(match[1]);
                        if (this.debug) {
                            console.log(`üîç È°µÈù¢ÊòæÁ§∫ÊÄªËÆ°: ${pageTotal} Â∞èÊó∂`);
                            console.log(`üìä ËÑöÊú¨ËÆ°ÁÆóÊÄªËÆ°: ${this.totalEffort} Â∞èÊó∂`);
                            const isMatch = Math.abs(pageTotal - this.totalEffort) < 0.01;
                            console.log(`${isMatch ? '‚úÖ È™åËØÅÈÄöËøá' : '‚ùå È™åËØÅÂ§±Ë¥•'} - Â∑ÆÂºÇ: ${Math.abs(pageTotal - this.totalEffort)}`);
                        }
                    }
                });
            });
            
            return pageTotal;
        }

        /**
         * ÁîüÊàêÁªüËÆ°ÊëòË¶Å
         * @returns {string} - ÊëòË¶Å‰ø°ÊÅØ
         */
        generateSummary() {
            if (this.records.length === 0) {
                return 'Êú™ÊâæÂà∞‰ªª‰ΩïÂ∑•‰ΩúËÆ∞ÂΩï';
            }
            
            const dates = [...new Set(this.records.map(r => r.date).filter(d => d))];
            const summary = [
                `üìä Â∑•‰ΩúÊó•ÂøóÁªüËÆ°ÊëòË¶Å`,
                `üìÖ ÁªüËÆ°Êó•Êúü: ${dates.length > 0 ? dates.join(', ') : 'Êú™Áü•'}`,
                `üìù ËÆ∞ÂΩïÊï∞Èáè: ${this.records.length} Êù°`,
                `‚è±Ô∏è  ÊÄªËÄóÊó∂: ${this.totalEffort} Â∞èÊó∂`,
                `üåê È°µÈù¢Âú∞ÂùÄ: ${window.location.href}`,
                ``,
                `üìã ËØ¶ÁªÜËÆ∞ÂΩï:`
            ];
            
            this.records.forEach((record, index) => {
                const workDesc = record.work || record.id || `ËÆ∞ÂΩï${index + 1}`;
                summary.push(`  ${index + 1}. ${workDesc} - ${record.effort}Â∞èÊó∂ ${record.date ? `(${record.date})` : ''}`);
            });
            
            return summary.join('\n');
        }

        /**
         * ÊâìÂç∞ÁªìÊûúÂà∞ÊéßÂà∂Âè∞
         */
        printResults(result) {
            console.log('\n' + '='.repeat(60));
            console.log('üéØ Â∑•‰ΩúÊó•ÂøóËÄóÊó∂ÁªüËÆ°ÁªìÊûú');
            console.log('='.repeat(60));
            console.log(result.summary);
            console.log('='.repeat(60));
            console.log(`üìä ÁªüËÆ°ÂÆåÊàêÊó∂Èó¥: ${new Date(result.timestamp).toLocaleString()}`);
            console.log(`üîß ËÑöÊú¨ÁâàÊú¨: v${result.version}`);
            console.log('='.repeat(60));
        }
    }

    // ÂàõÂª∫ÂÖ®Â±ÄÂÆû‰æã
    window.EffortCalculator = EffortCalculator;
    window.effortCalculator = new EffortCalculator();

    // Êèê‰æõÁÆÄÂåñÁöÑË∞ÉÁî®ÊñπÊ≥ï
    window.calculateEffort = function(debug = true) {
        const calculator = new EffortCalculator({ debug });
        return calculator.calculateEffort();
    };

    // Êèê‰æõÈùôÈªòÊ®°ÂºèÁöÑË∞ÉÁî®ÊñπÊ≥ï
    window.calculateEffortQuiet = function() {
        const calculator = new EffortCalculator({ debug: false });
        return calculator.calculateEffort();
    };

    console.log('üöÄ Á¶ÖÈÅìÂ∑•‰ΩúÊó•ÂøóËÄóÊó∂ÁªüËÆ°ËÑöÊú¨Â∑≤Âä†ËΩΩ');
    console.log('üí° ‰ΩøÁî®ÊñπÊ≥ï:');
    console.log('  - calculateEffort()      // ËØ¶ÁªÜÊ®°Âºè');
    console.log('  - calculateEffortQuiet() // ÈùôÈªòÊ®°Âºè');
    console.log('  - effortCalculator.calculateEffort() // ‰ΩøÁî®ÂÖ®Â±ÄÂÆû‰æã');

})();

// Á´ãÂç≥ÊâßË°å‰∏ÄÊ¨°ÊµãËØïÔºàÂ¶ÇÊûúÂú®ÊµèËßàÂô®ÁéØÂ¢É‰∏≠Ôºâ
if (typeof document !== 'undefined' && document.readyState === 'complete') {
    console.log('\nüß™ Ëá™Âä®ÊâßË°åÊµãËØï...');
    setTimeout(() => {
        try {
            const result = calculateEffort();
            console.log('‚úÖ Ëá™Âä®ÊµãËØïÂÆåÊàê');
        } catch (error) {
            console.error('‚ùå Ëá™Âä®ÊµãËØïÂ§±Ë¥•:', error);
        }
    }, 1000);
}
